/*
    mongodb : mongodb.org
    UI mongodb : https://robomongo.org/
*/

/*
    -----------------------------------------
    mongodb
    -----------------------------------------
*/

/*
    1. prompt 
    
    // 아래 경로에 폴더 생성
    서버 시작 : mongod --dbpath /Users/XXX/database/local
*/
/*
    2. prompt

    > mongo
    > use local
    
    > db.users.insert({ name: '소녀시대', age: 20 })
    > db.users.find()
    > db.users.find().pretty()

    // name 값이 소녀라는 text 를 포함하고 있으면 삭제
    > db.users.remove({ name: /소녀/ }) 
*/

/*
    const collection = database.collection('name')
    collection.insertMany([{ ... }], (err, result) => { })



    const addUser = (db, id, password, name, callback) => {
        console.log(`addUser 호출됨 : ${id}, ${password}, ${name}`)

        const users = db.collection('users')
        
        users.insertMany([{ id, password, name }], (err, result) => {
            if (err) {
                callback(err, null)
                return false
            }

            if (result.insertedCount > 0) {
                console.log(`사용자 추가됨 : ${result.insertedCount}`)
                callback(null, result)
            } else {
                console.log('추가된 레코드가 없음')
                callback(null, null)
            }

            /*
                result

                { 
                    result: { ok: 1, n: 1 },
                    ops: [ { id: '1111', password: '1111', name: '1111', _id: [Object] } ],
                    insertedCount: 1,
                    insertedIds: [ ObjectID { _bsontype: 'ObjectID', id: [Object] } ] 
                }
            */
        })
    }
*/

/*
    const collection = database.collection('name')
    collection.find({ ... }).toArray((err, docs) => { })

    const authUser = (db, id, password, callback) => {
        console.log(`authUser 호출됨 : ${id}, ${password}`)

        const users = db.collection('users')
        users.find({
            id,
            password
        }).toArray((err, docs) => {
            if (err) {
                callback(err, null)
                return false
            }

            if (docs.length) {
                console.log('일치하는 사용자를 찾음')
                callback(null, docs)
            } else {
                console.log('일치하는 사용자를 찾지 못함')
                callback(null, null)
            }
        })
    }
*/

/*
    -----------------------------------------
    mongoose
    -----------------------------------------
*/

/*
    const mongoose = require('mongoose')

    connect(uri, [options], [callback])
    - mongoose 를 사용해 데이터베이스에 연결합니다.
    - 연결 후에는 mongoose.connection 객체를 사용해 연결 관련 이벤트를 처리할 수 있습니다.

    Schema()
    - 스키마를 정의하는 생성자입니다.

    model(name, [schema], [collection], [skiplnit])
    - 모델을 정의합니다.
    - [collection]이 정의되면 이 컬렉션을 사용하며, 지정하지 않으면 name으로 유추한 컬렉션을 사용합니다.
*/

/*
    연결

    // mongoose 모듈
    const mongoose = require('mongoose')

    let database
    let UserSchema
    let UserModel

    function connectDB() {
        const databaseUrl = 'mongodb://admin:1234@ds257485.mlab.com:57485/doitnodejs'

        mongoose.Promise = global.Promise
        mongoose.connect(databaseUrl)
        database = mongoose.connection
        
        // 데이터베이스 연결 시 동작
        database.on('open', () => {
            console.log(`데이터베이스에 연결됨 : ${databaseUrl}`)

            UserSchema = mongoose.Schema({
                id: String,
                name: String,
                password: String
            })

            console.log('UserSchema 정의함')

            UserModel = mongoose.model('users', UserSchema)

            console.log('UserModel 정의함')
        })

        database.on('disconnected', () => {
            console.log('데이터베이스 연결 해제')
        })

        database.on('error', console.error.bind(console.log, 'mongoose 연결 에러'))
    }
*/

/*
    검색

    UserModel.find({ id, password }, (err, docs) => {
        if (err) {
            callback(err, null)
            return false;
        }

        if (docs.length) {
            console.log('일치하는 사용자를 찾음')
            callback(null, docs)
        } else {
            console.log('일치하는 사용자를 찾지 못함')
            callback(null, null)
        }
    })
*/

/*
    저장

    const user = new UserModel({ id, password, name })
    user.save((err) => {
        if (err) {
            callback(err, null)
            return false
        }

        console.log('사용자 데이터 추가함')
        callback(null, user)
    })
*/