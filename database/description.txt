/*
    mongodb : mongodb.org
    UI mongodb : https://robomongo.org/
*/

/*
    -----------------------------------------
    mongodb
    -----------------------------------------
*/

/*
    1. prompt 
    
    // 아래 경로에 폴더 생성
    서버 시작 : mongod --dbpath /Users/XXX/database/local
*/
/*
    2. prompt

    > mongo
    > use local
    
    > db.users.insert({ name: '소녀시대', age: 20 })
    > db.users.find()
    > db.users.find().pretty()

    // name 값이 소녀라는 text 를 포함하고 있으면 삭제
    > db.users.remove({ name: /소녀/ }) 
*/

/*
    const collection = database.collection('name')
    collection.insertMany([{ ... }], (err, result) => { })



    const addUser = (db, id, password, name, callback) => {
        console.log(`addUser 호출됨 : ${id}, ${password}, ${name}`)

        const users = db.collection('users')
        
        users.insertMany([{ id, password, name }], (err, result) => {
            if (err) {
                callback(err, null)
                return false
            }

            if (result.insertedCount > 0) {
                console.log(`사용자 추가됨 : ${result.insertedCount}`)
                callback(null, result)
            } else {
                console.log('추가된 레코드가 없음')
                callback(null, null)
            }

            /*
                result

                { 
                    result: { ok: 1, n: 1 },
                    ops: [ { id: '1111', password: '1111', name: '1111', _id: [Object] } ],
                    insertedCount: 1,
                    insertedIds: [ ObjectID { _bsontype: 'ObjectID', id: [Object] } ] 
                }
            */
        })
    }
*/

/*
    const collection = database.collection('name')
    collection.find({ ... }).toArray((err, docs) => { })

    const authUser = (db, id, password, callback) => {
        console.log(`authUser 호출됨 : ${id}, ${password}`)

        const users = db.collection('users')
        users.find({
            id,
            password
        }).toArray((err, docs) => {
            if (err) {
                callback(err, null)
                return false
            }

            if (docs.length) {
                console.log('일치하는 사용자를 찾음')
                callback(null, docs)
            } else {
                console.log('일치하는 사용자를 찾지 못함')
                callback(null, null)
            }
        })
    }
*/

/*
    -----------------------------------------
    mongoose
    -----------------------------------------
*/

/*
    const mongoose = require('mongoose')

    연결
        connect(uri, [options], [callback])
            - mongoose 를 사용해 데이터베이스에 연결합니다.
            - 연결 후에는 mongoose.connection 객체를 사용해 연결 관련 이벤트를 처리할 수 있습니다.

    스키마
        Schema()
            - 스키마를 정의하는 생성자입니다.
        
        타입
            - String, Number, Boolean, Array, Buffer, Date, Mixed

        속성
            - type : 자료형을 지정
            - required : 값이 true 이면 반드시 들어가야 하는 속성이 됩니다.
            - unique : 값이 true 이면 이 속성에 고유한 값이 들어가야 합니다.

        예제
            const UserSchema = new mongoose.Schema({
                id: { type: String, required: true, unique: true },
                password: { type: String, required: true },
                name: String,
                age: Number,
                created_at: Date,
                updated_at: Date
            })


    model(name, [schema], [collection], [skiplnit])
        - 모델을 정의합니다.
        - [collection]이 정의되면 이 컬렉션을 사용하며, 지정하지 않으면 name으로 유추한 컬렉션을 사용합니다.

        find([criteria], [callback])
            - 조회 조건을 사용해 컬렉션의 데이터를 조회합니다. 조회 결과는 콜백 함수로 전달됩니다.
        save([options], [callback])
            - 모델 인스턴스 객체의 데이터를 저장합니다. 저장 결과는 콜백 함수로 전달됩니다.
        update([criteria], [doc], [options], [callback])
            - 컬렉션의 데이터를 조회한 후 업데이트합니다. where() 메소드와 함께 사용됨
        remove([criteria], [callback])
            - 컬렉션의 데이터를 삭제합니다.

        예제
            UserModel.where({ id: 'aaa' }).update({ name: 'bbb' }, (err) => { })

    빠른 성능을 위한 인덱스와 편리함을 위한 메소드 추가 기능
        예제
            const UserSchema = new mongoose.Schema({
                id: { type: String, required: true, unique: true },
                password: { type: String, required: true },
                name: { type: String, index: 'hashed' },
                age: Number,
                created_at: { type: Date, index: { unique: false, expires: '1d' }}
                updated_at: Date
            })

        static(name, fn)
            - 모델 객체에서 사용할 수 있는 함수를 등록합니다.
            - 함수의 이름과 함수 객체를 파라미터로 전달합니다.

            find 의 결과는 배열, findOne 의 결과는 배열이 아님

            예제 (Arrow Function 은 this 객체 참조 문제로 인해 사용 불가)
                UserSchema.static('findById', function (id, callback) {
                    return this.find({ id }, callback)
                })
                UserSchema.statics.findById = function (id, callback) {
                    return this.findOne({ id }, callback)
                }
        
        method(name, fn)
            - 모텔 인스턴스 객체에서 사용할 수 있는 함수를 등록합니다.
            - 함수의 이름과 함수 객체를 파라미터로 전달합니다.

*/

/*
    연결

    // mongoose 모듈
    const mongoose = require('mongoose')

    let database
    let UserSchema
    let UserModel

    function connectDB() {
        const databaseUrl = 'mongodb://admin:1234@ds257485.mlab.com:57485/doitnodejs'

        mongoose.Promise = global.Promise
        mongoose.connect(databaseUrl)
        database = mongoose.connection
        
        // 데이터베이스 연결 시 동작
        database.on('open', () => {
            console.log(`데이터베이스에 연결됨 : ${databaseUrl}`)

            UserSchema = mongoose.Schema({
                id: String,
                name: String,
                password: String
            })

            console.log('UserSchema 정의함')

            UserModel = mongoose.model('users', UserSchema)

            console.log('UserModel 정의함')
        })

        database.on('disconnected', () => {
            console.log('데이터베이스 연결 해제')
        })

        database.on('error', console.error.bind(console.log, 'mongoose 연결 에러'))
    }
*/

/*
    검색

    UserModel.find({ id, password }, (err, docs) => {
        if (err) {
            callback(err, null)
            return false;
        }

        if (docs.length) {
            console.log('일치하는 사용자를 찾음')
            callback(null, docs)
        } else {
            console.log('일치하는 사용자를 찾지 못함')
            callback(null, null)
        }
    })
*/

/*
    저장

    const user = new UserModel({ id, password, name })
    user.save((err) => {
        if (err) {
            callback(err, null)
            return false
        }

        console.log('사용자 데이터 추가함')
        callback(null, user)
    })
*/